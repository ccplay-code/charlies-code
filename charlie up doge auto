import time
import pyupbit
import datetime
import requests
import numpy
import pandas


access = "BWHA1AuyykMabwRIMJsX8W86E8iGBQHdqmopRump"
secret = "OHGHk9vHpExFfEjvFudUNNxvnHvojB93xA6x5OF4"
myToken = "DOGE"

upbit = pyupbit.Upbit(access, secret)




#보유 코인 보유 현금 조회
while True:
    print(upbit.get_balance("KRW-DOGE"))     # KRW-XRP 조회
    print(upbit.get_balance("KRW"))         # 보유 현금 조회

    DOGEBAL=upbit.get_balance("KRW-DOGE")
    KRWBAL=upbit.get_balance("KRW")

    import pyupbit
    import numpy as np



# OHLCV(open, high, low, close, volume)로 당일 시가, 고가, 저가, 종가, 거래량에 대한 데이터
    df = pyupbit.get_ohlcv("KRW-DOGE", interval="minute5", count=21)

    tickerDOGE=pyupbit.get_current_price("KRW-DOGE") #해당 코인 현재가

    print(tickerDOGE)

    w= 20 # 기준 이동평균일 
    k= 2 # 기준 상수

#중심선 (MBB) : n일 이동평균선
    df["mbb"]=df["close"].rolling(w).mean()
    df["MA20_std"]=df["close"].rolling(w).std()

#상한선 (UBB) : 중심선 + (표준편차 × K)
#하한선 (LBB) : 중심선 - (표준편차 × K)
    df["ubb"]=df.apply(lambda x: x["mbb"]+k*x["MA20_std"],1)
    df["lbb"]=df.apply(lambda x: x["mbb"]-k*x["MA20_std"],1)

# df[['종가','mbb', 'ubb', 'lbb']][-200:].plot.line()

    print(df.iloc[19]["open"], df.iloc[19]["mbb"], df.iloc[19]["ubb"], df.iloc[19]["lbb"])
    print(df.iloc[20]["open"], df.iloc[20]["mbb"], df.iloc[20]["ubb"], df.iloc[20]["lbb"])
    open=df.iloc[20]["open"]
    mbb=df.iloc[20]["mbb"]
    lbb=df.iloc[20]["lbb"]
    ubb=df.iloc[20]["ubb"]
    selltap=open+(ubb-open)*2   #매도 타겟 금액
    buytap=open-(open-lbb)*2    #매수 타겟 금액
    #selltap2=mbb+(ubb-lbb)      #매도 타겟 긐액2
    #buytap2=mbb-(ubb-lbb)       #매수 타겟 금액2

    if tickerDOGE > selltap and (selltap-ubb)/selltap > 0.01: # 매도 논리(타겟 가격보다 현재가격이 높을때)

        #현재 가격이 타겟 가격보다 높은경우 
        #타겟 가격-볼벤가격 을 타겟 가격으로 나눈 값이 1% 이상일때
        #판매 수량 함수 지정(매수매도에 사용)
         upbit.sell_market_order("KRW-DOGE", DOGEBAL*0.5)
         #time.sleep(20)
         #upbit.buy_limit_order("KRW-DOGE",ubb, DOGEBAL)
         time.sleep(900)

    #if tickerDOGE > selltap2:

        #현재 가격이 타겟 가격보다 높은경우 
        #타겟 가격-볼벤가격 을 타겟 가격으로 나눈 값이 1% 이상일때
        #판매 수량 함수 지정(매수매도에 사용)
         #upbit.sell_market_order("KRW-DOGE", DOGEBAL*0.5)
         #time.sleep(20) # 볼벤 상단가 재구매를 위한 20초 sleep 타임
         #upbit.buy_limit_order("KRW-DOGE",ubb, DOGEBAL) #볼벤 상단가에 재구매
         #time.sleep(900)


     #불필요 # 타겟 가격이 양의 값일때
    if tickerDOGE < buytap and (lbb-buytap)/lbb > 0.01 and KRWBAL>5000: # 타겟 가격이 매수 가격이보다 높은 경우(함수를 만들어서 이전 매매 가격을 날짜베이스로 변수 생성)
           #매수 금액 / 수량 함수 지정(매수매도에사용)
         upbit.buy_market_order("KRW-DOGE", KRWBAL*0.9995)
         #time.sleep(20) # 볼벤 상단가 재구매를 위한 20초 sleep 타임
         #upbit.sell_limit_order("KRW-DOGE", KRWBAL*0.9995) #볼벤 상단가에 재구매
         time.sleep(900)
